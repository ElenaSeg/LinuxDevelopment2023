--- maze2.c	2023-12-19 01:32:41.234827985 +0300
+++ maze3.c	2023-12-19 01:31:20.222476870 +0300
@@ -7,10 +7,17 @@
 	int maze_size = 6;
 	char maze_w = '#';
 	char maze_p = '.';
+	long maze_s = (long)(time(NULL));
 	if (argc > 1) {
-		if (strlen(argv[1]) >= 2) {
-			char new_maze_w = argv[1][0];
-			char new_maze_p = argv[1][1];
+		int new_maze_s = atoi(argv[1]);
+		if (new_maze_s != 0) {
+			maze_s = new_maze_s;
+		}
+	}
+	if (argc > 2) {
+		if (strlen(argv[2]) >= 2) {
+			char new_maze_w = argv[2][0];
+			char new_maze_p = argv[2][1];
 			if (new_maze_w != 0) {
 				maze_w = new_maze_w;
 			}
@@ -19,13 +26,13 @@
 			}
 		}
 	}
-	if (argc > 2) {
-		int new_maze_size = atoi(argv[2]);
+	if (argc > 3) {
+		int new_maze_size = atoi(argv[3]);
 		if (new_maze_size > 0) {
 			maze_size = new_maze_size;
 		}
 	}
-	srand(time(NULL));
+	srand(maze_s);
 	int *maze_sets = calloc(maze_size, sizeof(int));
 	char *r_walls = calloc(maze_size*maze_size, sizeof(char));
 	char *d_walls = calloc(maze_size*maze_size, sizeof(char));
@@ -43,7 +50,6 @@
 				continue;
 			}
 			r_walls[i * maze_size + n] = (char)(rand() % 2);
-		
 			if (r_walls[i * maze_size + n] == 0) {
 				int class = maze_sets[n+1];
 				for (int k = 0; k < maze_size; k++) { 
@@ -92,6 +98,7 @@
 		memset(row, maze_w, 2 * maze_size + 1);
 		for (int j = 1; j < maze_size; j++) {
 			row[2 * j - 1] = maze_p;
+
 			if (r_walls[i * maze_size + j - 1] == 0) {
 				row[2 * j] = maze_p;
 			}	
